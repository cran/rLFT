// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// CalcBoundaryConvex
NumericMatrix CalcBoundaryConvex(NumericMatrix feature, double windowSize, double stepSize, int fid, std::string rid, std::string filename, bool noRID);
RcppExport SEXP _rLFT_CalcBoundaryConvex(SEXP featureSEXP, SEXP windowSizeSEXP, SEXP stepSizeSEXP, SEXP fidSEXP, SEXP ridSEXP, SEXP filenameSEXP, SEXP noRIDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< double >::type windowSize(windowSizeSEXP);
    Rcpp::traits::input_parameter< double >::type stepSize(stepSizeSEXP);
    Rcpp::traits::input_parameter< int >::type fid(fidSEXP);
    Rcpp::traits::input_parameter< std::string >::type rid(ridSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< bool >::type noRID(noRIDSEXP);
    rcpp_result_gen = Rcpp::wrap(CalcBoundaryConvex(feature, windowSize, stepSize, fid, rid, filename, noRID));
    return rcpp_result_gen;
END_RCPP
}
// addM
NumericMatrix addM(NumericMatrix feature);
RcppExport SEXP _rLFT_addM(SEXP featureSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type feature(featureSEXP);
    rcpp_result_gen = Rcpp::wrap(addM(feature));
    return rcpp_result_gen;
END_RCPP
}
// openOutput
void openOutput(std::string filename, bool noRID);
RcppExport SEXP _rLFT_openOutput(SEXP filenameSEXP, SEXP noRIDSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< bool >::type noRID(noRIDSEXP);
    openOutput(filename, noRID);
    return R_NilValue;
END_RCPP
}
// skipFeatureList
NumericVector skipFeatureList(NumericVector x, int i);
RcppExport SEXP _rLFT_skipFeatureList(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(skipFeatureList(x, i));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rLFT_CalcBoundaryConvex", (DL_FUNC) &_rLFT_CalcBoundaryConvex, 7},
    {"_rLFT_addM", (DL_FUNC) &_rLFT_addM, 1},
    {"_rLFT_openOutput", (DL_FUNC) &_rLFT_openOutput, 2},
    {"_rLFT_skipFeatureList", (DL_FUNC) &_rLFT_skipFeatureList, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rLFT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
